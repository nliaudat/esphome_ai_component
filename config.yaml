
# for flashing : press boot button for 2-3 seconds before the serial connection initialize
# After OTA update, the EN (reset) button must be pressed to run firmware
      
# external_components:
  # - source: 
      # type: git
      # url: https://github.com/nliaudat/esphome_ai_component
      # ref: main
    # components: [meter_reader_tflite]
      
external_components:    
  - source:
      type: local
      path: components 
    components: [meter_reader_tflite] 
      


############## General configuration

substitutions:

  name: s3cam-tflite #no special caracters
  friendly_name: "S3 camera tflite"
  id_prefix: "s3_cam_tflite" #if you have more than one board, it could be usefull to remane all the "id:prefix_xxxx" with a decicaded prefix
  revision: "1.2"
  
  # camera
  camera_pixel_format: JPEG # (cropping implementation is faster with RGB888 format) | Displays: RGB565, RGB888 | Cameras: YUV422, YUV420, RAW | Efficiency: Grayscale, YUV420, JPEG
  camera_resolution: 640x480 #800x600 #640x480 #https://esphome.io/components/esp32_camera.html
  camera_jpeg_quality: 10 # From 10 (best) to 63 (worst). | Must be 0 if non JPEG
  camera_max_framerate: 1fps
  camera_idle_framerate: 0.2fps
      
  #time
  TZ: "Europe/Zurich" #timezone
  reboot_days_of_week: "MON"
  reboot_hours: "5"
  reboot_minutes: "0"
  reboot_seconds: "0"

  
preferences:
  flash_write_interval: 60min
  

ota:
  - platform: esphome

safe_mode:

# network:
    # enable_ipv6: false
    

api:
  reboot_timeout: 0s # do not reboot if hassio connection is lost.
            
     
  
meter_reader_tflite:
  id: meter_reader
  camera_id: ${id_prefix}espcam
  model: "dig-class100-0180-s2-q.tflite"  # Must be in same directory as YAML
  confidence_threshold: 0.7
  # tensor_arena_size: "768KB" # OPTIONAL, set in model_config.h | check_tflite_model.py gives : Total Arena Size: 415.08 KB (Approx. RAM needed for inference)
  update_interval: 60s
  debug: false
  debug_image: false # static embedded image (debug.jpg)
  debug_image_out_serial: false
  crop_zones_global: crop_zones  # Reference the global variables set in globals_AI_component.yaml | To update, use http://[hassio]/developer-tools/action >esphome.[s3cam_tflite]_set_crop_zones | to get, use the tools>draw_regions.py
  flash_light: ${id_prefix}flash # optional : flash light at taking image
  flash_pre_time: 7000    # 7 seconds before update (time to stabilize)
  flash_post_time: 2000   # 2 seconds after update
  # auto_camera_window: true # auto zoom for OV2640, OV3660, OV5640, SC101IOT, SC030IOT from crop zones (explicit)
  # camera_window: true  # Auto-calculate from crop zones
  # camera_window: 
    # offset_x: 928 # multiple of 8
    # offset_y: 480 # multiple of 8
    # width: 448 # multiple of 8 and 4:3 proportions with height
    # height: 336 # multiple of 8 and 4:3 proportions with width
  


packages:

  # board choice
  # board: !include board_freenove_esp32-s3-n8r8.yaml
  board: !include board_AI-On-The-Edge-Cam_Esp32-S3.yaml
  # board: !include board_Seeed_Studio_XIAO_ESP32-S3_sense.yaml
  
  # AI components
  switch_AI_component: !include switch_AI_component.yaml
  sensor_AI_component: !include sensor_AI_component.yaml
  globals_AI_component: !include globals_AI_component.yaml
  text_sensor_AI_component: !include text_sensor_AI_component.yaml
  api_AI_component: !include api_AI_component.yaml
  
  # camera configs
  camera_options: !include camera_options.yaml
  esp32_camera: !include esp32_camera.yaml
  # camera_webserver: !include camera_webserver.yaml
  
  # network choice
  wifi: !include wifi.yaml
  # lan: !include lan.yaml # only for AI-On-The-Edge-Cam_Esp32-S3.yaml + wifi must be disabled
  
  # others
  globals: !include globals.yaml
  switch_others: !include switch_others.yaml
  sensor_others: !include sensor_others.yaml
  logger: !include logger.yaml 
  time: !include time.yaml




